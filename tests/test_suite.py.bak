#!/usr/bin/env python3
"""
Consolidated Test Suite for Agent Modest Scraper System
Combines all test functionality into organized test classes
"""

import unittest
import asyncio
import json
import os
import tempfile
from unittest.mock import Mock, patch
from pathlib import Path

# Import system components
from markdown_extractor import MarkdownExtractor
from playwright_agent import PlaywrightMultiScreenshotAgent
from unified_extractor import UnifiedExtractor
from base_image_processor import BaseImageProcessor
from batch_processor import BatchProcessor
from duplicate_detector import DuplicateDetector

class TestMarkdownExtractor(unittest.TestCase):
    """Test suite for markdown extraction functionality"""
    
    def setUp(self):
        self.extractor = MarkdownExtractor()
        self.test_urls = {
            'uniqlo': 'https://www.uniqlo.com/us/en/products/E460004-000',
            'mango': 'https://shop.mango.com/us/women/dresses-midi/midi-dress_17012027.html',
            'revolve': 'https://www.revolve.com/dp/LEVI-WD1299/',
            'asos': 'https://www.asos.com/us/topshop/dress/prd/123456',
            'hm': 'https://www2.hm.com/en_us/productpage.0123456789.html'
        }
    
    def test_supported_retailers(self):
        """Test retailer support validation"""
        for retailer in ['uniqlo', 'mango', 'revolve', 'asos', 'hm']:
            self.assertTrue(self.extractor.is_supported_retailer(retailer))
        
        self.assertFalse(self.extractor.is_supported_retailer('nordstrom'))
    
    def test_json_parsing(self):
        """Test JSON response parsing robustness"""
        valid_json = '{"title": "Test Product", "price": "$29.99", "image_urls": ["http://example.com/image.jpg"]}'
        result = self.extractor._parse_json_response(valid_json)
        self.assertIsNotNone(result)
        self.assertEqual(result['title'], 'Test Product')
    
    def test_validation_logic(self):
        """Test product data validation"""
        valid_data = {
            'title': 'Test Product',
            'price': '$29.99',
            'image_urls': ['http://example.com/image1.jpg', 'http://example.com/image2.jpg'],
            'stock_status': 'in stock',
            'sale_status': 'not on sale'
        }
        issues = self.extractor._validate_extracted_data(valid_data, 'uniqlo', 'http://test.com')
        self.assertEqual(len(issues), 0)

class TestPlaywrightAgent(unittest.TestCase):
    """Test suite for Playwright browser agent functionality"""
    
    def setUp(self):
        self.config = {
            'playwright': {
                'headless': True,
                'timeout': 30000,
                'screenshot_quality': 90
            },
            'llm_providers': {
                'google': {'api_key': 'test_key'}
            }
        }
    
    def test_retailer_routing(self):
        """Test retailer-specific routing logic"""
        browser_retailers = ['nordstrom', 'aritzia', 'anthropologie', 'urban_outfitters', 'abercrombie']
        
        for retailer in browser_retailers:
            # Test that browser retailers are properly identified
            self.assertIn(retailer, browser_retailers)
    
    def test_verification_detection(self):
        """Test verification challenge detection"""
        # Mock verification scenarios
        test_scenarios = [
            {'text': 'Press and hold', 'expected': 'press_hold'},
            {'text': 'I am human', 'expected': 'checkbox'},
            {'text': 'Cloudflare', 'expected': 'cloudflare'}
        ]
        
        # These would be implemented with actual verification logic
        for scenario in test_scenarios:
            self.assertIsNotNone(scenario['expected'])

class TestUnifiedExtractor(unittest.TestCase):
    """Test suite for unified extraction system"""
    
    def setUp(self):
        self.extractor = UnifiedExtractor()
    
    def test_routing_logic(self):
        """Test intelligent routing between markdown and Playwright"""
        markdown_retailers = ['uniqlo', 'mango', 'revolve', 'asos', 'hm']
        browser_retailers = ['nordstrom', 'aritzia', 'anthropologie', 'urban_outfitters', 'abercrombie']
        
        for retailer in markdown_retailers:
            # Should route to markdown first
            self.assertIn(retailer, markdown_retailers)
        
        for retailer in browser_retailers:
            # Should route to browser agent directly
            self.assertIn(retailer, browser_retailers)

class TestImageProcessing(unittest.TestCase):
    """Test suite for image processing functionality"""
    
    def setUp(self):
        self.processor = BaseImageProcessor()
    
    def test_url_validation(self):
        """Test image URL validation"""
        valid_urls = [
            'https://example.com/image.jpg',
            'https://cdn.example.com/image.png',
            'https://images.example.com/image.webp'
        ]
        
        invalid_urls = [
            'not_a_url',
            'https://example.com/',
            ''
        ]
        
        for url in valid_urls:
            self.assertTrue(url.startswith('https://'))
        
        for url in invalid_urls:
            self.assertFalse(url.startswith('https://') and url.endswith(('.jpg', '.png', '.webp')))
    
    def test_quality_scoring(self):
        """Test image quality scoring logic"""
        # Mock quality scoring scenarios
        high_quality_indicators = ['large', 'full', 'original', 'main', 'front', 'zoom']
        low_quality_indicators = ['thumb', 'small', 'preview']
        
        for indicator in high_quality_indicators:
            # High quality URLs should score higher
            self.assertGreater(len(indicator), 2)
        
        for indicator in low_quality_indicators:
            # Low quality URLs should score lower
            self.assertGreater(len(indicator), 2)

class TestBatchProcessing(unittest.TestCase):
    """Test suite for batch processing functionality"""
    
    def setUp(self):
        self.processor = BatchProcessor()
    
    def test_batch_validation(self):
        """Test batch data validation"""
        valid_batch = {
            'batch_id': 'test_batch_001',
            'urls': [
                {'url': 'https://example.com/product1', 'retailer': 'uniqlo'},
                {'url': 'https://example.com/product2', 'retailer': 'mango'}
            ],
            'modesty_level': 'modest'
        }
        
        # Basic validation checks
        self.assertIn('batch_id', valid_batch)
        self.assertIn('urls', valid_batch)
        self.assertTrue(len(valid_batch['urls']) > 0)

class TestDuplicateDetection(unittest.TestCase):
    """Test suite for duplicate detection functionality"""
    
    def setUp(self):
        self.detector = DuplicateDetector()
    
    def test_url_normalization(self):
        """Test URL normalization for duplicate detection"""
        test_cases = [
            ('https://example.com/product?utm_source=test', 'https://example.com/product'),
            ('https://www.example.com/product/', 'https://example.com/product'),
            ('http://example.com/product', 'https://example.com/product')
        ]
        
        for original, expected in test_cases:
            # This would use actual normalization logic
            self.assertIsNotNone(original)
            self.assertIsNotNone(expected)

class TestSystemIntegration(unittest.TestCase):
    """Integration tests for the complete system"""
    
    def test_end_to_end_flow(self):
        """Test complete extraction workflow"""
        # This would test the full pipeline:
        # URL input -> Routing -> Extraction -> Validation -> Storage
        test_url = 'https://www.uniqlo.com/us/en/products/E460004-000'
        retailer = 'uniqlo'
        
        # Basic flow validation
        self.assertIsNotNone(test_url)
        self.assertIsNotNone(retailer)
    
    def test_error_handling(self):
        """Test error handling and fallback mechanisms"""
        # Test various error scenarios
        error_scenarios = [
            'network_timeout',
            'invalid_response', 
            'extraction_failure',
            'validation_failure'
        ]
        
        for scenario in error_scenarios:
            # Each scenario should be handled gracefully
            self.assertIsNotNone(scenario)

class TestAntiDetection(unittest.TestCase):
    """Test suite for anti-detection measures"""
    
    def test_user_agent_rotation(self):
        """Test user agent rotation functionality"""
        user_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
        ]
        
        for ua in user_agents:
            self.assertTrue(ua.startswith('Mozilla/5.0'))
    
    def test_timing_delays(self):
        """Test anti-detection timing mechanisms"""
        min_delay = 1.0
        max_delay = 3.0
        
        # Delays should be within reasonable bounds
        self.assertLess(min_delay, max_delay)
        self.assertGreater(max_delay, 0)

# Test runner
def run_tests():
    """Run the complete test suite"""
    # Create test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Add all test classes
    test_classes = [
        TestMarkdownExtractor,
        TestPlaywrightAgent, 
        TestUnifiedExtractor,
        TestImageProcessing,
        TestBatchProcessing,
        TestDuplicateDetection,
        TestSystemIntegration,
        TestAntiDetection
    ]
    
    for test_class in test_classes:
        tests = loader.loadTestsFromTestCase(test_class)
        suite.addTests(tests)
    
    # Run tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    return result.wasSuccessful()

if __name__ == '__main__':
    success = run_tests()
    exit(0 if success else 1) 